{"version":3,"sources":["Camera/index.js","Module/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","selfPhoto","display","height","width","alignItem","justifyContent","border","marginBottom","selfImg","props","selfImgData","setSelfImgData","classes","className","src","id","Button","variant","color","reShot","onClick","navigator","mediaDevices","getUserMedia","audio","video","then","mediaStream","console","log","document","querySelector","srcObject","onloadedmetadata","e","play","canvas","getElementById","onclick","pause","getContext","drawImage","toDataURL","shot","module","flexDirection","alignItems","moduleImg","uploadFileInput","opacity","position","left","top","zIndex","cursor","uploadDiv","uploadImg","maxWidth","maxHeight","fileRef","useRef","uploadImgData","setUploadImgData","alt","ref","type","accept","onChange","current","files","fileReader","FileReader","readAsDataURL","onload","result","root","flexGrow","paper","padding","spacing","textAlign","palette","text","secondary","resultImg","App","useState","resultImgData","setResultImgData","api_keyRef","api_secretRef","Grid","container","justify","item","xs","Paper","Camera","style","backgroundColor","transform","TextField","required","label","inputRef","formData","FormData","append","value","$","ajax","url","data","processData","contentType","crossDomain","success","response","error_message","alert","error","xhr","status","responseText","fontSize","marginTop","Module","Boolean","window","location","hostname","match","ReactDOM","render","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.527f9861.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nconst useStyles = makeStyles(theme => ({\n  selfPhoto: {\n    display: \"flex\",\n    height: \"300px\",\n    width: \"100%\",\n    alignItem: \"center\",\n    justifyContent: \"center\",\n    border: \"1px solid grey\",\n    marginBottom: \"5px\"\n  },\n  selfImg: {\n    // marginTop: \"25px\",\n    // marginBottom: \"25px\",\n    // height: \"250px\",\n    // width: \"200px\",\n    display: \"none\"\n  }\n}));\nexport default function(props) {\n  const { selfImgData, setSelfImgData } = props;\n  const takePhoto = () => {\n    const constraints = { audio: true, video: { width: 200, height: 250 } };\n    navigator.mediaDevices\n      .getUserMedia(constraints)\n      .then(function(mediaStream) {\n        console.log(\"getUserMedia:\", mediaStream);\n        let video = document.querySelector(\"video\");\n        video.srcObject = mediaStream;\n        video.onloadedmetadata = function(e) {\n          video.play();\n        };\n\n        let canvas = document.getElementById(\"canvas\");\n        document.querySelector(\".shot\").onclick = () => {\n          video.pause();\n          canvas.getContext(\"2d\").drawImage(video, 0, 0, 200, 250);\n          console.log(canvas.toDataURL(\"image/jpeg\"));\n          setSelfImgData(canvas.toDataURL(\"image/jpeg\"));\n        };\n      });\n  };\n  // useEffect(takePhoto, []);\n  const classes = useStyles();\n  return (\n    <div>\n      <div className={classes.selfPhoto}>\n        <video src=\"\"></video>\n        <canvas\n          id=\"canvas\"\n          className={classes.selfImg}\n          width=\"200\"\n          height=\"250\"\n        ></canvas>\n      </div>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        className={classes.reShot}\n        onClick={takePhoto}\n      >\n        重拍/打开摄像头\n      </Button>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={(classes.shot, \"shot\")}\n      >\n        拍照\n      </Button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useRef } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nconst useStyles = makeStyles(theme => ({\n  module: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  moduleImg: {\n    display: \"flex\",\n    height: \"300px\",\n    width: \"100%\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    border: \"1px solid grey\",\n    marginBottom: \"5px\"\n  },\n  uploadFileInput: {\n    opacity: \"0\",\n    height: \"100%\",\n    width: \"100%\",\n    position: \"absolute\",\n    left: \"0\",\n    top: \"0\",\n    zIndex: \"2\",\n    cursor: \"pointer\"\n  },\n  uploadDiv: {\n    position: \"relative\",\n    width: \"150px\",\n    cursor: \"pointer\"\n  },\n  uploadImg: {\n    maxWidth: \"200px\",\n    maxHeight: \"250px\"\n  }\n}));\nexport default function(props) {\n  const previewImg = () => {\n    console.log(fileRef.current.files[0]);\n    let fileReader = new FileReader();\n    fileReader.readAsDataURL(fileRef.current.files[0]);\n    fileReader.onload = () => {\n      setUploadImgData(fileReader.result);\n    };\n  };\n  const classes = useStyles();\n  const fileRef = useRef();\n  const { uploadImgData, setUploadImgData } = props;\n  return (\n    <div className={classes.module}>\n      <div className={classes.moduleImg}>\n        <img\n          className={classes.uploadImg}\n          alt=\"模板照片\"\n          src={uploadImgData}\n        ></img>\n      </div>\n      <div className={classes.uploadDiv}>\n        <Button variant=\"contained\" color=\"primary\">\n          点击上传\n        </Button>\n        <input\n          ref={fileRef}\n          type=\"file\"\n          accept=\"image/*\"\n          className={classes.uploadFileInput}\n          onChange={previewImg}\n        ></input>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useState, useRef } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport $ from \"jquery\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Camera from \"./Camera\";\nimport Module from \"./Module\";\nimport \"./App.css\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 2\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary\n    // height: \"400px\"\n  },\n  resultImg: {\n    maxWidth: \"400px\"\n  }\n}));\nfunction App() {\n  const getResultImg = () => {\n    let formData = new FormData();\n    formData.append(\"api_key\", api_keyRef.current.value);\n    formData.append(\"api_secret\", api_secretRef.current.value);\n    formData.append(\"template_base64\", uploadImgData);\n    formData.append(\"merge_base64\", selfImgData);\n    $.ajax({\n      type: \"POST\",\n      url: \"https://api-cn.faceplusplus.com/imagepp/v1/mergeface\",\n      data: formData,\n      processData: false,\n      contentType: false,\n      crossDomain: true,\n      success: function(response) {\n        if (typeof response.error_message == \"undefined\") {\n          // todo: 在这里添加生成后的逻辑，response.result 为生成图的base64编码\n          console.log(response);\n          setResultImgData(\"data:image/jpg/png;base64,\" + response.result);\n          // $('.uploadpic').attr('src', 'data:image/jpg/png;base64,' + response.result);\n        } else {\n          // todo: 在这里添加上传失败的逻辑\n          alert(\"请重新上传照片\");\n        }\n      },\n      error: function(xhr, status, error) {\n        console.log(xhr.responseText);\n        // todo: 在这里添加上传失败的逻辑\n        alert(\"请重新上传照片\");\n      }\n    });\n  };\n  const classes = useStyles();\n  const [selfImgData, setSelfImgData] = useState();\n  const [uploadImgData, setUploadImgData] = useState();\n  const [resultImgData, setResultImgData] = useState();\n  const api_keyRef = useRef();\n  const api_secretRef = useRef();\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={2} justify=\"center\">\n        <Grid item xs={5}>\n          <Paper className={classes.paper}>\n            <Camera\n              selfImgData={selfImgData}\n              setSelfImgData={setSelfImgData}\n            ></Camera>\n          </Paper>\n        </Grid>\n        <Grid item xs={2}>\n          <Paper\n            className={classes.paper}\n            style={{ backgroundColor: \"pink\", transform: \"translateY(80px)\" }}\n          >\n            <TextField\n              required\n              id=\"filled-required\"\n              label=\"api_key\"\n              inputRef={api_keyRef}\n              variant=\"filled\"\n            />\n            <TextField\n              required\n              id=\"filled-required\"\n              label=\"api_secret\"\n              inputRef={api_secretRef}\n              variant=\"filled\"\n            />\n            <Button\n              onClick={getResultImg}\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                fontSize: \"20px\",\n                marginTop: \"10px\"\n              }}\n            >\n              +\n            </Button>\n          </Paper>\n        </Grid>\n        <Grid item xs={5}>\n          <Paper className={classes.paper}>\n            <Module\n              uploadImgData={uploadImgData}\n              setUploadImgData={setUploadImgData}\n            ></Module>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <img\n              alt=\"结果图\"\n              className={classes.resultImg}\n              src={resultImgData}\n            ></img>\n          </Paper>\n        </Grid>\n      </Grid>\n      {/*<Camera></Camera>*/}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}